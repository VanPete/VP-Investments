name: VP Investments - Cloud Runs

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
  schedule:
    # Note: GitHub Actions uses UTC. To cover ET pre-open (08:30) and post-close (17:00)
    # across DST changes, we schedule both UTC offsets and gate in a step below.
    - cron: '30 12 * * 1-5'  # 08:30 ET during EDT
    - cron: '30 13 * * 1-5'  # 08:30 ET during EST
    - cron: '0 21 * * 1-5'   # 17:00 ET during EDT
    - cron: '0 22 * * 1-5'   # 17:00 ET during EST

permissions:
  contents: read

concurrency:
  group: vp-investments-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Write .env from GitHub Secrets
        env:
          FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          {
            echo "USE_ENV_CONFIG=1"                  # allow env overrides
            echo "SCHED_ENABLED=0"                   # disabled in CI; we run --once
            echo "SCHED_TWICE_DAILY=1"
            echo "SCHED_TIMEZONE=US/Eastern"
            echo "MARKET_OPEN_TIME=09:30"
            echo "MARKET_CLOSE_TIME=16:00"
            echo "PRE_OPEN_OFFSET_MINUTES=60"
            echo "POST_CLOSE_OFFSET_MINUTES=60"
            # Secrets
            [ -n "${FMP_API_KEY:-}" ] && echo "FMP_API_KEY=$FMP_API_KEY"
            [ -n "${REDDIT_CLIENT_ID:-}" ] && echo "REDDIT_CLIENT_ID=$REDDIT_CLIENT_ID"
            [ -n "${REDDIT_CLIENT_SECRET:-}" ] && echo "REDDIT_CLIENT_SECRET=$REDDIT_CLIENT_SECRET"
            [ -n "${REDDIT_USER_AGENT:-}" ] && echo "REDDIT_USER_AGENT=$REDDIT_USER_AGENT"
            [ -n "${NEWS_API_KEY:-}" ] && echo "NEWS_API_KEY=$NEWS_API_KEY"
            [ -n "${OPENAI_API_KEY:-}" ] && echo "OPENAI_API_KEY=$OPENAI_API_KEY"
            [ -n "${OPENAI_MODEL:-}" ] && echo "OPENAI_MODEL=$OPENAI_MODEL"
            [ -n "${SENTRY_DSN:-}" ] && echo "SENTRY_DSN=$SENTRY_DSN"
            [ -n "${SLACK_WEBHOOK_URL:-}" ] && echo "SLACK_WEBHOOK_URL=$SLACK_WEBHOOK_URL"
          } > .env

      - name: Gate on ET pre-open/post-close windows (skip otherwise)
        if: ${{ github.event_name == 'schedule' }}
        run: |
          python - << 'PY'
          from datetime import datetime, time, timedelta
          import pytz
          et = pytz.timezone('US/Eastern')
          now = datetime.now(et)
          targets = [time(8,30), time(17,0)]  # 08:30 ET pre-open, 17:00 ET post-close
          window = timedelta(minutes=20)
          ok = any(abs((now.replace(hour=t.hour, minute=t.minute, second=0, microsecond=0) - now)) <= window for t in targets)
          if not ok:
              print(f"Skipping run at {now.isoformat()} (not within ET pre-open/post-close window)")
              raise SystemExit(78)  # neutral exit
          print(f"Proceeding: within allowed ET window at {now.strftime('%H:%M %Z')}")
          PY

      - name: Run pipeline once
        run: |
          python run_all.py --once

      - name: Upload outputs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: outputs-${{ github.run_id }}
          path: |
            outputs/**
          if-no-files-found: warn

      - name: Upload logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ github.run_id }}
          path: |
            outputs/logs/**
          if-no-files-found: warn
