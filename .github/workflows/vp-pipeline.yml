name: VP Investments Pipeline

on:
  workflow_dispatch:
  schedule:
  # Dual crons to cover DST changes for exact 08:30 and 17:00 ET, Mon-Fri
  # 08:30 ET → 12:30 (EDT) and 13:30 (EST)
  - cron: '30 12 * * 1-5'
  - cron: '30 13 * * 1-5'
  # 17:00 ET → 21:00 (EDT) and 22:00 (EST)
  - cron: '0 21 * * 1-5'
  - cron: '0 22 * * 1-5'

permissions:
  contents: write
  pages: write
  id-token: write
  issues: write

concurrency:
  group: vp-pipeline
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Gate on ET 08:30/17:00 windows (skip otherwise)
        if: ${{ github.event_name == 'schedule' }}
        run: |
          python - << 'PY'
          from datetime import datetime, time, timedelta
          import pytz
          et = pytz.timezone('US/Eastern')
          now = datetime.now(et)
          targets = [time(8,30), time(17,0)]  # 08:30 and 17:00 ET
          window = timedelta(minutes=15)
          ok = any(abs((now.replace(hour=t.hour, minute=t.minute, second=0, microsecond=0) - now)) <= window for t in targets)
          if not ok:
              print(f"Skipping run at {now.isoformat()} (outside ET 08:30/17:00 ±15m window)")
              raise SystemExit(78)  # neutral exit
          print(f"Proceeding: within allowed ET window at {now.strftime('%H:%M %Z')}")
          PY

      - name: Run pipeline (once)
        env:
          USE_ENV_CONFIG: '1'
          FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        run: |
          python run_all.py --once --stream --timeout 1800

      - name: Prepare Pages index redirect
        run: |
          mkdir -p outputs
          echo '<meta http-equiv="refresh" content="0; url=dashboard/dashboard.html">' > outputs/index.html

      - name: Upload outputs as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vp-outputs-${{ github.run_number }}
          path: outputs
          if-no-files-found: warn
          retention-days: 30

      - name: Upload logs as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vp-logs-${{ github.run_number }}
          path: outputs/logs
          if-no-files-found: warn

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: outputs

      - name: Persist outputs to data branch (cumulative)
        run: |
          set -e
          REPO="https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git"
          git clone --depth 1 --branch data "$REPO" data-repo || (
            git clone --depth 1 "$REPO" data-repo && cd data-repo && git checkout --orphan data && git rm -rf . || true
          )
          cd data-repo
          STAMP=$(date -u +%Y-%m-%d_%H-%M-%S)
          mkdir -p "runs/$STAMP"
          cp -r ../outputs/* "runs/$STAMP/"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Add outputs for run ${{ github.run_number }} at $STAMP"
          git push "$REPO" HEAD:data

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `VP pipeline failed: run #${{ github.run_number }}`;
            const body = `The scheduled run failed.\n\n- Workflow: ${process.env.GITHUB_WORKFLOW}\n- Run: https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}\n\nArtifacts (if any) and logs are available in the workflow run.`;
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ["ci-failure"]
            });
            core.info(`Created issue #${issue.number}`);

  deploy:
    needs: run
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
